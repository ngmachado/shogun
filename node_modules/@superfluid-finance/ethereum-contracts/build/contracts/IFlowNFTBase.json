{
  "contractName": "IFlowNFTBase",
  "abi": [
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_TO_CALLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_INVALID_TOKEN_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "flowDataByTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "flowStartDate",
              "type": "uint32"
            }
          ],
          "internalType": "struct IFlowNFTBase.FlowNFTData",
          "name": "flowData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerMetadataUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/superfluid/IFlowNFTBase.sol\":\"IFlowNFTBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x385a7061f1436b079d44c140dee9387d5313e94874ff9ee877dc0085c981ac3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c3fe22bb0d9527356e11f267f9187134de4d4ed1ff77468b4d73e3238697b96\",\"dweb:/ipfs/Qmc8caJctgxbzXEpxRogQMR2bnBk5U67hA7kKbUEG2PUXV\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x8c817a6d85868039485ecdf1c7163f2e06be939cfc3923ba4ca6628f614282a1\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://d3e816400006db8e39faf5287f76da1785060f7a21c68103453bb37f18ba6db0\",\"dweb:/ipfs/Qmbnd8TktXALrsngVNAHR546YJgnJ47tffkPug1j4jitDu\"]},\"project:/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb989f0fe54561ecb32f66ac55427d98866c77ee4b6a1da52aca2e0953a7f7f06\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://049ca939f07e24558748ebacc6f17c3e72161c16516e77bf9d501c338b3dd7b4\",\"dweb:/ipfs/QmVVbywb88aaiKLzs75zz5tbkPptrm2ihki8jGrn232jW2\"]},\"project:/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x5df423f453923ff6f7ee716e7c1c64d2e19743ad77455b0bba23fd28f2a9d587\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://191e99e332eee5c9b4a7ee19648e44554d9fe34c6c93be9fc2d2cbf9fbc1997a\",\"dweb:/ipfs/QmcxN6M6WAhmso9Yevag419p6tDNjJH3DJqbWdBurc4o8J\"]},\"project:/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0x1c62c63f39c7c9ba03ddde542690ccfea343b5b3b442ed4cf2830b43af6f9cbe\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://e3ef914d4089c070d1f48b8d292a360d05373e5454ab45d6bef3d8b5170c3885\",\"dweb:/ipfs/QmZcXa9CfuaCxDfp8ncip6oAY849HFzDJ8rnMN8roSLvnk\"]},\"project:/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x3a93bb86598d8840dc333efce41c0fcc8b839df6597c3be49dcb4e3d4fb9f074\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://469e7af1687de706da737007596663e20ec634d7ac6daa032be8c263e57eb518\",\"dweb:/ipfs/QmSQtjPankaurKEbKrf2M1bLe3TaPFvdHxUdmaRYgZ4TG4\"]},\"project:/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5555e072e755dea4ffcd4c0c74d8ca8e7f782d462e049c8eb09171b0edc38394\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://25b7c8e97377da22641038a58b1f05a719634241887839874191012a203dbfcf\",\"dweb:/ipfs/QmbvMjTbm4gpPaxSBGetBYSJs2SQesAzjEp66F9w8JoZhG\"]},\"project:/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0x9b4fab6dcac1337f78e04d67d8c2b48b1de8bd4bbf14b475840f9dbda7b8f21e\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://cc2f3629ad0cb46bd4f595880591ad6c9d75a82d920cb9355e462fbf8022c820\",\"dweb:/ipfs/QmXMovxK4qpWT4yffXxUVjkMNwxEfS6mtn39mLSmjaxEdW\"]},\"project:/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0x0182f29b230b034686dc505935ca0a1635fc537274bb592393a6e259010be08b\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c728b787a7575bbfab0e6c24b18ccd29e457f5797611027af3f8ca664e94dcc\",\"dweb:/ipfs/QmXxAWjWjLdEdZQVAJyEYcBtiZBdNK7c5CfDC5UjaN3yZQ\"]},\"project:/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xc179b68b0641e7fa8873d77a4f3bb1116533e5da1120683fe5ee4bb6419d38d2\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://b888e81e39cc519e56ac10553756c059e18cbea45debb7113c6a1c86008a96c6\",\"dweb:/ipfs/QmWeWRsF52zk122qmxjpVePSRvdXjfDZzDY1ucdFtDMEjh\"]},\"project:/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0xac57bbc7e9432bf926d4f9913b71301b18b4519de12e22892ebbc646d43b88c5\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://4a18f0c241ee2236bc5ec588718601242cec0b20fb9f3d432272264f2330dd36\",\"dweb:/ipfs/QmSjhobAGMzCqpyf1oWXjGF6bH8RwWVcKYT9oRDLAWUEi3\"]},\"project:/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0xab9dab941f99d0f0ef6125fb6eafde03378d7c3e94e613dd12fb7fbf594c3373\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://928c6ef915dee69058d4cfcb9f2344d4fc78d9763b47b17e5c03fbff64ba3c64\",\"dweb:/ipfs/Qmdk733ZHceatz3qbuodLCCS9TUspJJtXLoX6vWwMvrPDE\"]},\"project:/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x90a9259d0f0bb6b1bb6d48f051277eb75df96a9fbe684a203a3a468ad19318e2\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://9c8162a2d07ffe768920fef55292684149173afefbfba76b8fca007e55092229\",\"dweb:/ipfs/QmducLNwrzeUXEpBjUTSMu7sfmQEwVhcYXApe4brc1zQ6V\"]},\"project:/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x9cad3866982902ea88df0874a563d2e4aeba5a5bcc6289c30cccf9b4099d2fb6\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://e8fd960b259331f204c7cb7dcd32b09d68f4294e3b872fad00ad467609c3ef72\",\"dweb:/ipfs/QmeZFEvsDunXQGPbXFfN5AvfKM5am1FY8Xv6e3c4tNKvgY\"]},\"project:/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0x55be78ffb441c782f612b153d7d9049e3f0dbfd412c1f7df29c896b972b2985f\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://a223c68e38a6c9b1e363e525911bc7eda44ea517865ae53bd0d34ff858cc02ae\",\"dweb:/ipfs/QmVruGehibG6Emr2A6JHwUnhd4NzsGkE24cbGqnDpEvrKh\"]},\"project:/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x7456cd394cc905aae7cdbd4601ce1c296c768c13c28e66efbb913cc070bad3e4\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://5a6589b428b724721ba5b4dd196c8f366a6e694ef313add093f29af64496c042\",\"dweb:/ipfs/QmSMgV6y8L6pyyzDz6kKmafVwujNWcjTqutpCBxe4uNRqg\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.8.4;\n\nimport {\n    IERC721Metadata\n} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\ninterface IFlowNFTBase is IERC721Metadata {\n    // FlowNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | superToken      | FREE\n    //         | 160b            | 96b\n    // WORD 2: | flowSender      | FREE\n    //         | 160b            | 96b\n    // WORD 3: | flowReceiver    | flowStartDate | FREE\n    //         | 160b            | 32b           | 64b\n    struct FlowNFTData {\n        address superToken;\n        address flowSender;\n        address flowReceiver;\n        uint32 flowStartDate;\n    }\n\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();   // 0xa3352582\n    error CFA_NFT_APPROVE_TO_CALLER();                              // 0xd3c77329\n    error CFA_NFT_APPROVE_TO_CURRENT_OWNER();                       // 0xe4790b25\n    error CFA_NFT_INVALID_TOKEN_ID();                               // 0xeab95e3b\n    error CFA_NFT_ONLY_SUPER_TOKEN_FACTORY();                       // 0xebb7505b\n    error CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();  // 0x2551d606\n    error CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER();                  // 0x5a26c744\n    error CFA_NFT_TRANSFER_IS_NOT_ALLOWED();                        // 0xaa747eca\n    error CFA_NFT_TRANSFER_TO_ZERO_ADDRESS();                       // 0xde06d21e\n\n    /**************************************************************************\n     * Events\n     *************************************************************************/\n\n    /// @notice Informs third-party platforms that NFT metadata should be updated\n    /// @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n    /// @param tokenId the id of the token that should have its metadata updated\n    event MetadataUpdate(uint256 tokenId);\n\n    /**************************************************************************\n     * View\n     *************************************************************************/\n\n    /// @notice An external function for querying flow data by `tokenId``\n    /// @param tokenId the token id\n    /// @return flowData the flow data associated with `tokenId`\n    function flowDataByTokenId(\n        uint256 tokenId\n    ) external view returns (FlowNFTData memory flowData);\n\n    /// @notice An external function for computing the deterministic tokenId\n    /// @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n    /// @param superToken the super token\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    /// @return tokenId the tokenId\n    function getTokenId(\n        address superToken,\n        address flowSender,\n        address flowReceiver\n    ) external view returns (uint256);\n\n    /**************************************************************************\n     * Write\n     *************************************************************************/\n\n    function initialize(\n        string memory nftName,\n        string memory nftSymbol\n    ) external; // initializer;\n\n    function triggerMetadataUpdate(uint256 tokenId) external;\n}\n",
  "sourcePath": "/home/runner/work/protocol-monorepo/protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/superfluid/IFlowNFTBase.sol",
    "exportedSymbols": {
      "IERC721Metadata": [
        2025
      ],
      "IFlowNFTBase": [
        23831
      ],
      "ISuperToken": [
        24454
      ]
    },
    "id": 23832,
    "license": "AGPLv3",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 23759,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:24:48"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 23761,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 23832,
        "sourceUnit": 2026,
        "src": "61:106:48",
        "symbolAliases": [
          {
            "foreign": {
              "id": 23760,
              "name": "IERC721Metadata",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2025,
              "src": "74:15:48",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/interfaces/superfluid/ISuperToken.sol",
        "file": "./ISuperToken.sol",
        "id": 23763,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 23832,
        "sourceUnit": 24455,
        "src": "168:48:48",
        "symbolAliases": [
          {
            "foreign": {
              "id": 23762,
              "name": "ISuperToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 24454,
              "src": "177:11:48",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 23764,
              "name": "IERC721Metadata",
              "nameLocations": [
                "244:15:48"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2025,
              "src": "244:15:48"
            },
            "id": 23765,
            "nodeType": "InheritanceSpecifier",
            "src": "244:15:48"
          }
        ],
        "canonicalName": "IFlowNFTBase",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 23831,
        "linearizedBaseContracts": [
          23831,
          2025,
          1998,
          2850
        ],
        "name": "IFlowNFTBase",
        "nameLocation": "228:12:48",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IFlowNFTBase.FlowNFTData",
            "id": 23774,
            "members": [
              {
                "constant": false,
                "id": 23767,
                "mutability": "mutable",
                "name": "superToken",
                "nameLocation": "631:10:48",
                "nodeType": "VariableDeclaration",
                "scope": 23774,
                "src": "623:18:48",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 23766,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "623:7:48",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23769,
                "mutability": "mutable",
                "name": "flowSender",
                "nameLocation": "659:10:48",
                "nodeType": "VariableDeclaration",
                "scope": 23774,
                "src": "651:18:48",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 23768,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "651:7:48",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23771,
                "mutability": "mutable",
                "name": "flowReceiver",
                "nameLocation": "687:12:48",
                "nodeType": "VariableDeclaration",
                "scope": 23774,
                "src": "679:20:48",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 23770,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "679:7:48",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23773,
                "mutability": "mutable",
                "name": "flowStartDate",
                "nameLocation": "716:13:48",
                "nodeType": "VariableDeclaration",
                "scope": 23774,
                "src": "709:20:48",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 23772,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "709:6:48",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "FlowNFTData",
            "nameLocation": "601:11:48",
            "nodeType": "StructDefinition",
            "scope": 23831,
            "src": "594:142:48",
            "visibility": "public"
          },
          {
            "errorSelector": "a3352582",
            "id": 23776,
            "name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
            "nameLocation": "930:52:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23775,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "982:2:48"
            },
            "src": "924:61:48"
          },
          {
            "errorSelector": "d3c77329",
            "id": 23778,
            "name": "CFA_NFT_APPROVE_TO_CALLER",
            "nameLocation": "1012:25:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1037:2:48"
            },
            "src": "1006:34:48"
          },
          {
            "errorSelector": "e4790b25",
            "id": 23780,
            "name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
            "nameLocation": "1094:32:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23779,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1126:2:48"
            },
            "src": "1088:41:48"
          },
          {
            "errorSelector": "eab95e3b",
            "id": 23782,
            "name": "CFA_NFT_INVALID_TOKEN_ID",
            "nameLocation": "1176:24:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1200:2:48"
            },
            "src": "1170:33:48"
          },
          {
            "errorSelector": "ebb7505b",
            "id": 23784,
            "name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
            "nameLocation": "1258:32:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23783,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1290:2:48"
            },
            "src": "1252:41:48"
          },
          {
            "errorSelector": "2551d606",
            "id": 23786,
            "name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
            "nameLocation": "1340:53:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1393:2:48"
            },
            "src": "1334:62:48"
          },
          {
            "errorSelector": "5a26c744",
            "id": 23788,
            "name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
            "nameLocation": "1422:37:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23787,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1459:2:48"
            },
            "src": "1416:46:48"
          },
          {
            "errorSelector": "aa747eca",
            "id": 23790,
            "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
            "nameLocation": "1504:31:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1535:2:48"
            },
            "src": "1498:40:48"
          },
          {
            "errorSelector": "de06d21e",
            "id": 23792,
            "name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
            "nameLocation": "1586:32:48",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 23791,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1618:2:48"
            },
            "src": "1580:41:48"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 23793,
              "nodeType": "StructuredDocumentation",
              "src": "1838:233:48",
              "text": "@notice Informs third-party platforms that NFT metadata should be updated\n @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n @param tokenId the id of the token that should have its metadata updated"
            },
            "eventSelector": "f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7",
            "id": 23797,
            "name": "MetadataUpdate",
            "nameLocation": "2082:14:48",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 23796,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23795,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2105:7:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23797,
                  "src": "2097:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23794,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2097:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2096:17:48"
            },
            "src": "2076:38:48"
          },
          {
            "documentation": {
              "id": 23798,
              "nodeType": "StructuredDocumentation",
              "src": "2293:170:48",
              "text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
            },
            "functionSelector": "8d47859e",
            "id": 23806,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "flowDataByTokenId",
            "nameLocation": "2477:17:48",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23801,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23800,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2512:7:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23806,
                  "src": "2504:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23799,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2504:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2494:31:48"
            },
            "returnParameters": {
              "id": 23805,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23804,
                  "mutability": "mutable",
                  "name": "flowData",
                  "nameLocation": "2568:8:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23806,
                  "src": "2549:27:48",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FlowNFTData_$23774_memory_ptr",
                    "typeString": "struct IFlowNFTBase.FlowNFTData"
                  },
                  "typeName": {
                    "id": 23803,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 23802,
                      "name": "FlowNFTData",
                      "nameLocations": [
                        "2549:11:48"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 23774,
                      "src": "2549:11:48"
                    },
                    "referencedDeclaration": 23774,
                    "src": "2549:11:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$23774_storage_ptr",
                      "typeString": "struct IFlowNFTBase.FlowNFTData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2548:29:48"
            },
            "scope": 23831,
            "src": "2468:110:48",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 23807,
              "nodeType": "StructuredDocumentation",
              "src": "2584:345:48",
              "text": "@notice An external function for computing the deterministic tokenId\n @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n @param superToken the super token\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n @return tokenId the tokenId"
            },
            "functionSelector": "89f71d2d",
            "id": 23818,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenId",
            "nameLocation": "2943:10:48",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23809,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "2971:10:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23818,
                  "src": "2963:18:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23808,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2963:7:48",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23811,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "2999:10:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23818,
                  "src": "2991:18:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23810,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2991:7:48",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23813,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "3027:12:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23818,
                  "src": "3019:20:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23812,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3019:7:48",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2953:92:48"
            },
            "returnParameters": {
              "id": 23817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23816,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 23818,
                  "src": "3069:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23815,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3069:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3068:9:48"
            },
            "scope": 23831,
            "src": "2934:144:48",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "4cd88b76",
            "id": 23825,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "3267:10:48",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23820,
                  "mutability": "mutable",
                  "name": "nftName",
                  "nameLocation": "3301:7:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23825,
                  "src": "3287:21:48",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 23819,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3287:6:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23822,
                  "mutability": "mutable",
                  "name": "nftSymbol",
                  "nameLocation": "3332:9:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23825,
                  "src": "3318:23:48",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 23821,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3318:6:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3277:70:48"
            },
            "returnParameters": {
              "id": 23824,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3356:0:48"
            },
            "scope": 23831,
            "src": "3258:99:48",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "2f388560",
            "id": 23830,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "triggerMetadataUpdate",
            "nameLocation": "3388:21:48",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23827,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "3418:7:48",
                  "nodeType": "VariableDeclaration",
                  "scope": 23830,
                  "src": "3410:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23826,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3410:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3409:17:48"
            },
            "returnParameters": {
              "id": 23829,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3435:0:48"
            },
            "scope": 23831,
            "src": "3379:57:48",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 23832,
        "src": "218:3220:48",
        "usedErrors": [
          23776,
          23778,
          23780,
          23782,
          23784,
          23786,
          23788,
          23790,
          23792
        ]
      }
    ],
    "src": "35:3404:48"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-04-26T14:22:06.999Z",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
        "params": {
          "tokenId": "the id of the token that should have its metadata updated"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "flowDataByTokenId(uint256)": {
        "params": {
          "tokenId": "the token id"
        },
        "returns": {
          "flowData": "the flow data associated with `tokenId`"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getTokenId(address,address,address)": {
        "details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
        "params": {
          "flowReceiver": "the flow receiver",
          "flowSender": "the flow sender",
          "superToken": "the super token"
        },
        "returns": {
          "_0": "tokenId the tokenId"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MetadataUpdate(uint256)": {
        "notice": "Informs third-party platforms that NFT metadata should be updated"
      }
    },
    "kind": "user",
    "methods": {
      "flowDataByTokenId(uint256)": {
        "notice": "An external function for querying flow data by `tokenId``"
      },
      "getTokenId(address,address,address)": {
        "notice": "An external function for computing the deterministic tokenId"
      }
    },
    "version": 1
  }
}